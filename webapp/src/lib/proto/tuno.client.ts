// @generated by protobuf-ts 2.9.6 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "tuno.proto" (package "tuno", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Tuno } from "./tuno";
import type { SongStreamRequest } from "./tuno";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SongBytes } from "./tuno";
import type { SongRequest } from "./tuno";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EchoResponse } from "./tuno";
import type { EchoRequest } from "./tuno";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service tuno.Tuno
 */
export interface ITunoClient {
    /**
     * @generated from protobuf rpc: Echo(tuno.EchoRequest) returns (tuno.EchoResponse);
     */
    echo(input: EchoRequest, options?: RpcOptions): UnaryCall<EchoRequest, EchoResponse>;
    /**
     * @generated from protobuf rpc: FetchSong(tuno.SongRequest) returns (tuno.SongBytes);
     */
    fetchSong(input: SongRequest, options?: RpcOptions): UnaryCall<SongRequest, SongBytes>;
    /**
     * @generated from protobuf rpc: StreamSong(tuno.SongStreamRequest) returns (stream tuno.SongBytes);
     */
    streamSong(input: SongStreamRequest, options?: RpcOptions): ServerStreamingCall<SongStreamRequest, SongBytes>;
}
/**
 * @generated from protobuf service tuno.Tuno
 */
export class TunoClient implements ITunoClient, ServiceInfo {
    typeName = Tuno.typeName;
    methods = Tuno.methods;
    options = Tuno.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Echo(tuno.EchoRequest) returns (tuno.EchoResponse);
     */
    echo(input: EchoRequest, options?: RpcOptions): UnaryCall<EchoRequest, EchoResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoRequest, EchoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchSong(tuno.SongRequest) returns (tuno.SongBytes);
     */
    fetchSong(input: SongRequest, options?: RpcOptions): UnaryCall<SongRequest, SongBytes> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SongRequest, SongBytes>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamSong(tuno.SongStreamRequest) returns (stream tuno.SongBytes);
     */
    streamSong(input: SongStreamRequest, options?: RpcOptions): ServerStreamingCall<SongStreamRequest, SongBytes> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SongStreamRequest, SongBytes>("serverStreaming", this._transport, method, opt, input);
    }
}
